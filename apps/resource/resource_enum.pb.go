// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package resource

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseVENDORFromString Parse VENDOR from string
func ParseVENDORFromString(str string) (VENDOR, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := VENDOR_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown VENDOR: %s", str)
	}

	return VENDOR(v), nil
}

// Equal type compare
func (t VENDOR) Equal(target VENDOR) bool {
	return t == target
}

// IsIn todo
func (t VENDOR) IsIn(targets ...VENDOR) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t VENDOR) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *VENDOR) UnmarshalJSON(b []byte) error {
	ins, err := ParseVENDORFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseTYPEFromString Parse TYPE from string
func ParseTYPEFromString(str string) (TYPE, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := TYPE_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown TYPE: %s", str)
	}

	return TYPE(v), nil
}

// Equal type compare
func (t TYPE) Equal(target TYPE) bool {
	return t == target
}

// IsIn todo
func (t TYPE) IsIn(targets ...TYPE) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t TYPE) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *TYPE) UnmarshalJSON(b []byte) error {
	ins, err := ParseTYPEFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParsePayModeFromString Parse PayMode from string
func ParsePayModeFromString(str string) (PayMode, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := PayMode_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown PayMode: %s", str)
	}

	return PayMode(v), nil
}

// Equal type compare
func (t PayMode) Equal(target PayMode) bool {
	return t == target
}

// IsIn todo
func (t PayMode) IsIn(targets ...PayMode) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t PayMode) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *PayMode) UnmarshalJSON(b []byte) error {
	ins, err := ParsePayModeFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseUsageModeFromString Parse UsageMode from string
func ParseUsageModeFromString(str string) (UsageMode, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := UsageMode_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown UsageMode: %s", str)
	}

	return UsageMode(v), nil
}

// Equal type compare
func (t UsageMode) Equal(target UsageMode) bool {
	return t == target
}

// IsIn todo
func (t UsageMode) IsIn(targets ...UsageMode) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t UsageMode) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *UsageMode) UnmarshalJSON(b []byte) error {
	ins, err := ParseUsageModeFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseTAG_TYPEFromString Parse TAG_TYPE from string
func ParseTAG_TYPEFromString(str string) (TAG_TYPE, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := TAG_TYPE_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown TAG_TYPE: %s", str)
	}

	return TAG_TYPE(v), nil
}

// Equal type compare
func (t TAG_TYPE) Equal(target TAG_TYPE) bool {
	return t == target
}

// IsIn todo
func (t TAG_TYPE) IsIn(targets ...TAG_TYPE) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t TAG_TYPE) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *TAG_TYPE) UnmarshalJSON(b []byte) error {
	ins, err := ParseTAG_TYPEFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseUpdateActionFromString Parse UpdateAction from string
func ParseUpdateActionFromString(str string) (UpdateAction, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := UpdateAction_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown UpdateAction: %s", str)
	}

	return UpdateAction(v), nil
}

// Equal type compare
func (t UpdateAction) Equal(target UpdateAction) bool {
	return t == target
}

// IsIn todo
func (t UpdateAction) IsIn(targets ...UpdateAction) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t UpdateAction) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *UpdateAction) UnmarshalJSON(b []byte) error {
	ins, err := ParseUpdateActionFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
